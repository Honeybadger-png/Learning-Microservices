Next service that will be ticketing service which will:
- List all tickets
- Show a particular ticket
- Create a ticket
- Edit a ticket

We need to pull some services into a shared library that we are going to then start to use between all of our different services.
There are more than three ways to share code between projects but we will be focusing on three of them
#1 Code Sharing Option - Direct Copy Paste
#2 Code Sharing Option- Git Submodule
#3 Code Sharing Option - NPM Package (sharing common codes as a npm package !!!! WE WILL USE THIS METHOD)

When we work on our own project that i can work in the future, i can have some very sensitive code inside of it.
It might contain some very sensitive business logic or something similar. And so before even creating this package, we should think over the security.
When we publish a package with AMPM, there are really three different options or three very popular options available to us to make this package available to other people inside of our company or the other peope who are working on our project.

We can publish this package to the NPM public registry. 
We can publish it to the public registry inside of an organization
Or we can publish it to a private registry.

To publish common:
we will create git repo
git add . 
git commit -m "message"
npm publist --access public (if it gives error try to login)

!!! There might be differences in our TS settings between the common lib and our services - don't want to deal with that
- Services might not be written with TS at all!
- Our common library will be written as Typescript and published as Javascript

To do that we install del-cli and typescript with --save-dev tag then we write build script in package.json
as "build": "tsc" and we will provide some settings in the tsconfig file.
We uncomment: 
-declaration: true ,
-outDir : write "./build" thats it 

its very common to want to remove everything inside of the build directory before rebuildint it for that we use del cli with writing "clean": "del ./build/*" script in package json file
and change build script to first do the clean then run tsc.

there are two option for importing common files such as error which is:
1- import {BadRequestError} from '@m-gticketing/common/errors/bad-request-error'
2- import {BadRequestError} from '@m-gticketing/common'

for that purpose we exported all the files in the common index.ts file like:
export * from './errors/bad-request-error';
then we build it with tsc but we got errors because we had to install necessary packages that we use in those files.
then we publish it.
After that we installed our custom module with the name of the which is m-gtickets/common for me 
and we fixed importing errors in some of auth files using my custom module

*************---------------------*************
In the upcoming lecture, we will run a command to update our common module.

As of current versions of NPM, this will require a small change to update the semver values of the package.json.

Instead, we have two options:

npm update --save @YOUR_ORG_NAME/common

or

npm install @YOUR_ORG_NAME/common@latest

Note - remember to replace YOUR_ORG_NAME with your actual NPM organization name.

to look if the correct version is running in the pod
kubectl exec -it auth-depl-7c94d7b54f-jplcg sh

