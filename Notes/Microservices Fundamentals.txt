Communication Strategies between services

Sync : Service communicate with each other using direct requests
Async : Services communicate with each other using events

Sync Communication: It is easy to use but there is still problems with dependency between services. If one crash it can effects the service.
Also the entire request is only as fast as the slowest request

Event Based Communication: request event send by event bus and the response data also created with event and send with event bus. Same problems in sync communication occur.

Kubernetes cluster : A collections of nodes + a master to manage them
Node : A virtual machine that will run our containers
Pod : More or less a running container. Techincally, a pod can run multiple containers ( we won't do this)
Deployman : Monitors a set of pods, make sure they are running and restarts them if they crash
Service : Provides an easy-to-remember URL to access a running container

**Kubernetes Config Files**
- Tells kubernetes about the different deployments,Pods, and Services (referred to as 'Objects') that we want to created
- Written in YAML syntax
- Always store these files with our project source code - they are documentation!
- We can create Objects without config files - do not do this. Config files provide a precise definition of what your cluster is running
 - Kubernetes docs will tell you to run direct commands to create objects - only do this for testing purposes
 - Blog posts will tell you to run direct commands to create objects - close the blog post

I had a ImagePullBackOff status in my pods. I had to delete pod with kubectl delete -f infra/k8s/ commands
then update the manifest by adding imagePullPolicy: Never 
after that error i have got ErrImageNeverPull error and I solved it:
docker build -t mertg/posts:0.0.1 . 
docker tag mertg/posts:0.0.1 mertg/posts:0.0.1
kubectl apply -f infra/k8s/
kubectl get pods 

solved my error.

Understanding pod spec:
- apiVersion: v1 = K8s is extensible - we can add in our own custom objects. This specifies the set of objects we want K8s to look at
- kind: Pod = The type of object we want to create
- metadata: = Config options for the object we are about to create
 - name: posts = when the pod is created give it a name of 'posts'
- spec: = the exact attributes we want to apply to the object we are about to create
 -containers: = we can create many containers in a single pod
  - - name:posts = Make a container with a name of 'posts'
  - image: mertg/posts:0.0.1  = the exact image we want to use

Deployment: instead of creating pods directly we will usually use deployment.
if pods crashes deployment will automatically create that pod for us.

Updating the Image Used By a Deployment - Method #1
- Make a change to your project code
- rebuild the image, specifying a new image version
- In the deployment config file update the version of the image
- Run the command 
- kubectl apply -f [depl file name]

Updating the Image Used By a Deployment - Method #2
- The deployment must be using 'latest' tag in the pod spec section
- make an update to your code 
- Build the image
- Push the image to docker hub
- Run the command kubectl rollout restart deployment [depl_name]

Types of Services
- *Cluster IP : Sets up an easy-to-remember URL to access a pod. Only exposes pods in the cluster.
- Node Port : Makes a pod accessible from outside the cluster. Usually only used for dev purposes
- *Load Balancer : Makes a pod accessible from outside the cluster. This is the right way to expose a pod to the outside world.
- External Name : Redirects an in-cluster request to a CNAME url ......... don't worry about this one....

Creating a NodePort Service
we will write config for posts-srv.yaml file.
we use selector inside of posts-srv in the purpose of find the pods that has posts label.
we can get nodePort by kubectl get services
Docker for Mac/Windows -> localhost:3xxxx/posts
Docker Toolbox with Minikube -> <some_ip>:3xxxx/posts

Building a deployment for the Event Bus
- Build an image for the Event Bus
- Push the image to Dokcer hub
- Create a deployment for Event Bus
- Create a Cluster IP service for Event Bus and posts
- Wire it all up!

How to communicate between services
we will change Req to "http://event-bus-srv:4005"

**Load Balancer Service**

React app will reach out to the load balancer and the request will be sent to appropriate pod response also follows the same route

Load Balancer Service: Tells Kubernetes to reach out to its provider and provision a load balancer. Gets traffic in to a single pod
Ingress or Ingress Controller : A pod with a set of routing rules to distribute traffic to other services
Outside world send request to load balancer and load balancer send its to Ingress Controller and There will be set of rules. So Ingress Controller send request to exact 
pod(cluster ip) Based on the route or the rules.

Skaffold Tool 
- Automates many tasks in a Kubernetes dev environment
- Makes it really easy to updae code in a running pod
- Makes it really easy to create/delete all objects tied to a project at once
- Skaffold.dev
Skaffold API version Update

The v2Alpha3 API version of Skaffold that is used in the course is a few versions behind. Based on all of our recent testing this should still be supported and work without any errors or issues.

skaffold schema list will return the API versions that are supported by the version of Skaffold you have installed.

That said, some students may want to upgrade their skaffold config. There is a very easy way to do this by just running skaffold fix from your terminal:

https://skaffold.dev/docs/references/cli/#skaffold-fix

This will print an updated version of your Skaffold config to the terminal so that you can copy-paste or review and update as needed. This will not automatically update or modify your existing file.

The main difference between the two APIs is that the deploy and kubectl fields no longer exist:

apiVersion: skaffold/v2alpha3
kind: Config
deploy:
  kubectl:
    manifests:
      - ./infra/k8s/*
...
Should now be written as:

apiVersion: skaffold/v4beta3
kind: Config
manifests:
  rawYaml:
    - ./infra/k8s/*
...
You can find the full updated code attached to the next lecture as a zip file.

after installation we create skaffold.yaml file and write some config
then we simply write skaffol dev in command line volaa now we dont have to build new image, push and write rollout command
there is two level of restarting because of nodemon just restart the app when the code changes and skallfold also do the same thing
so if you use just node to create your app changes will not work.

there will be challenges when changing somefile and it will not affect we will see in the next lectures to solve that kind of problems.